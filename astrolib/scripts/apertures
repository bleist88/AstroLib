#!/anaconda3/bin/python3
"""
This script performs aperture photometry on a set of images using the class
`astrolib.photo.stamp` for any number of aperture and annulus radii provided.

usage:
    apertures -c <apertures.cfg>

inputs:
    configs file:   contains parameters used by apertures and input file paths
    images file:    contains list of images to operate on
    sources file:   contains the id, ra and dec of all sources

outputs:
    .photo file:    a .photo file for each input image with columns
                        id, alpha, delta, sky, sky_std, +
                        ( flux, flux_err, mag, mag_err ) for each ap. radius
"""

from astrolib.imports import *

##  ============================================================================
##  Setup

print(                                         )
print( "A P E R T U R E   P H O T O M E T R Y" )
print( "                           - astrolib" )
print(                                         )

##  Read in command line arguments.

cl_parser       = io.CL_Parser( sys.argv )
configs_file    = cl_parser.get_flag( "-c", default="apertures.cfg" )

##  Read in configs.

print( "Using configs from %s..." % configs_file )

configs         = io.read_configs( configs_file )

source_file     = configs["source_file"]
unit            = configs["unit"]
R               = configs["R"]
R_i             = configs["R_i"]
R_o             = configs["R_o"]
sigma           = configs["sigma"]
epsilon         = configs["epsilon"]

runs            = configs["run"]
if isinstance(runs[0], list):
    im_files    = [ runs[i][0] for i in range( len(runs) ) ]
    out_files   = [ runs[i][1] for i in range( len(runs) ) ]
else:
    im_files    = [ runs[0] ]
    out_files   = [ runs[1] ]

for key in configs:
    if "run" in key:
        continue
    print( "   ", key, (20 - len(key)) * " ", configs[ key ] )
print()

##  Read in sources from the input file.

print( "Using sources from %s..." % source_file )

sources         = io.read( source_file )

print( "    %i sources" % sources.size )

##  Create the output array.
##  Add flux_, flux_err_, mag_, mag_err_ columns for each aperture R.

out_dtype   = {
    "names":    ["id", "alpha", "delta", "sky", "sky_std"],
    "formats":  ["i8", "f8", "f8", "f8", "f8"]
}

flux_cols       = []
flux_err_cols   = []
mag_cols        = []
mag_err_cols    = []

for i, r in enumerate( R ):

    flux_cols.append(       "flux_" + str(r)            )
    flux_err_cols.append(   "flux_" + str(r) + "_err"   )
    mag_cols.append(        "mag_"  + str(r)            )
    mag_err_cols.append(    "mag_"  + str(r) + "_err"   )

    out_dtype["names"].append(      flux_cols[i]        )
    out_dtype["names"].append(      flux_err_cols[i]    )
    out_dtype["names"].append(      mag_cols[i]         )
    out_dtype["names"].append(      mag_err_cols[i]     )

    out_dtype["formats"].append( "f8" )
    out_dtype["formats"].append( "f8" )
    out_dtype["formats"].append( "f8" )
    out_dtype["formats"].append( "f8" )

photometry          = np.zeros( sources.size, dtype=out_dtype )
photometry["id"]    = sources["id"]
photometry["alpha"] = sources["alpha"]
photometry["delta"] = sources["delta"]

##  ============================================================================
##  Photometry

for i, im_file in enumerate( im_files ):

    ##  Create a stamp object and set the apertures and annulus.

    print()
    print( "Performing aperture photometry on %s..." % im_file )

    S       = 1.1 * np.max( R_o )
    stamp   = photo.stamp( photo.image(im_file), S=S, unit=unit )

    for key in ["pix_scale", "gain", "mag_0", "mag_0_err" ]:
        print( "   ", key, (20 - len(key)) * " ", stamp.image.__dict__[ key ] )
    print()

    ##  Perform aperture photometry for each object in sources.

    for j, source in enumerate( sources ):

        io.progress( j, sources.size )

        ##  Set the data and annulus and calculate the sky.

        stamp.set_target( alpha=source["alpha"], delta=source["delta"] )

        ##  For each aperture radius given...

        for k in range( len(R) ):

            ##  Set the aperture and annulus.
            ##  Calculate the background and flux.

            stamp.set_aperture( R[k] )
            stamp.set_annulus( R_i[k], R_o[k] )
            stamp.calc_sky( sigma=sigma, epsilon=epsilon )
            stamp.calc_flux( subtract=True )

            ##  Write to the data array.

            R_str   = str( R[k] )

            photometry[j][ "sky"                    ]   = stamp.sky
            photometry[j][ "sky_std"                ]   = stamp.sky_std
            photometry[j][ "flux_" + R_str          ]   = stamp.flux
            photometry[j][ "flux_" + R_str + "_err" ]   = stamp.flux_err
            photometry[j][ "mag_"  + R_str          ]   = stamp.mag
            photometry[j][ "mag_"  + R_str + "_err" ]   = stamp.mag_err

    ##  Create the output file path and write to file.

    io.write( out_files[i], photometry )

print( "...done!" )
print()
